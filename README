NAME
    HTTP::CookieMonster - Easily Read and Update your Jar of HTTP::Cookies

VERSION
    version 0.01

SYNOPSIS
        use HTTP::CookieMonster;
        use WWW::Mechanize;

        my $mech = WWW::Mechanize->new;
        $mech->get( 'http://www.nytimes.com' );

        my $monster = HTTP::CookieMonster->new( cookie_jar => $mech->cookie_jar );
        my $cookie = $monster->feeling_lucky('RMID');
        print $cookie->val;

DESCRIPTION
  new
    new() takes just one required parameter, which is cookie_jar, a valid
    HTTP::Cookies object. See below for sample code.

        my $monster = HTTP::CookieMonster->new( cookie_jar => $mech->cookie_jar );

  cookie_jar
    An HTTP::Cookies object. You would typically get this via:

        my $ua = LWP::UserAgent->new;
        $ua->cookie_jar

        # or via WWW::Mechanize (which inherits from LWP::UserAgent)

        my $mech = WWW::Mechanize->new;
        $mech->cookie_jar;

  all_cookies
    Returns an ArrayRef of all cookies in the cookie jar, represented as
    HTTP::CookieMonster::Cookie objects.

  set_cookie( $cookie )
    Sets the cookie (updates the cookie jar). Requires a
    HTTP::CookieMonster::Cookie object.

        my $monster = HTTP::CookieMonster->new( cookie_jar => $mech->cookie_jar );
        my $s = $monster->feeling_lucky('session');
        $s->val('random_string');

        $monster->set_cookie( $s );

        # You can add an entirely new cookie to the jar via this method
        use HTTP::CookieMonster::Cookie;
        my $cookie = HTTP::CookieMonster::Cookie->new(
            key       => 'cookie-name',
            val       => 'cookie-val',
            path      => '/',
            domain    => '.somedomain.org',
            path_spec => 1,
            secure    => 0,
            expires   => 1376081877
        );

        $monster->set_cookie( $cookie );

  feeling_lucky( $name )
    Be aware that this method may surprise you by what it returns.
    feeling_lucky() iterates over the cookies in all_cookies() and returns
    the first cookie which exactly matches the name supplied. In many cases
    this will be exactly what you want, but that won't always be the case.
    If you are spidering multiple web sites with the same UserAgent object,
    be aware that you'll likely have cookies from multiple sites in your
    cookie jar. In this case asking for feeling_lucky('session') may not
    return the cookie which you were expecting.

    However, if you're running some tests against your own site or just
    crawling one specific site and you are confident that only one cookie
    with this name exists, feeling_lucky will save you a few lines of code.
    It's mostly meant as a quick hack for when you want to check a cookie in
    a hurry and have a reasonable amount of confidence that there are no
    duplicate cookies in the jar with this name.

        my $mech = WWW::Mechanize->new;
        $mech->get( 'http://www.nytimes.com' );

        $monster = HTTP::CookieMonster->new( cookie_jar => $mech->cookie_jar );
        my $rmid = $monster->feeling_lucky('RMID');

AUTHOR
    Olaf Alders <olaf@wundercounter.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2012 by Olaf Alders.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

